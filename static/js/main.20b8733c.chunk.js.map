{"version":3,"sources":["Components/navbar.js","Components/searchcategories.js","Components/recipedescription.js","Components/recipecard.js","Components/categories.js","Data/data.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["StyledNavBar","styled","nav","props","theme","colors","primaryDark","StyledA","a","primaryWhite","Navbar","prevScrollpos","window","pageYOffset","onscroll","currentScrollPos","document","getElementById","style","top","id","name","href","StyledSearchBar","div","StyledDiv","darkGrey","SearchCategory","prop","categories","map","category","index","key","StyledRecipeDescription","RecipeDesc","children","StyledRecipeName","h2","RecipeCard","useState","showRecipe","setShowRecipe","recipe","onClick","description","StyledCategory","StyledCatTitle","h1","Category","recipes","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20b8733c.chunk.js","sourcesContent":["import React from 'react';\nimport styled from \"@emotion/styled\";\n\nconst StyledNavBar = styled.nav`\n  overflow: hidden;\n  background-color: ${(props) => props.theme.colors.primaryDark};\n  position: fixed; \n  top: 0;\n  width: 100%; \n  height: 95px;\n  text-align: center;\n  transition: top 0.2s;\n    `;\n\nconst StyledA = styled.a`\n  text-decoration: none;\n  color: ${(props) => props.theme.colors.primaryWhite};\n  font-size: 4em;\n  font-family: Sansita Swashed;\n`;\n\nexport default function Navbar() {\n    let prevScrollpos = window.pageYOffset; // Make navbar retract when scrolling down\n     window.onscroll = function() {\n        let currentScrollPos = window.pageYOffset;\n        if (prevScrollpos > currentScrollPos) {\n            document.getElementById(\"navbar\").style.top = \"0\";\n        } else {\n            document.getElementById(\"navbar\").style.top = `-${currentScrollPos}px`;\n        }\n        prevScrollpos = currentScrollPos;\n    }\n\n    return (\n        <StyledNavBar id=\"navbar\" name=\"top\">\n            <StyledA href=\"#top\">Cooking Buddy</StyledA>\n        </StyledNavBar>\n    )\n}","import React from 'react';\nimport styled from \"@emotion/styled\";\n\nconst StyledSearchBar = styled.div`\ncolor: ${(props) => props.theme.colors.primaryWhite};\nmargin-top: 95px;\ndisplay: flex;\njustify-content: space-around;\ntext-align: center;\npadding-bottom: 46vh;\n`;\n\nconst StyledDiv = styled.div`\nbackground-color: ${(props) => props.theme.colors.darkGrey};\nwidth: 20%;\n`;\n\nconst StyledA = styled.a`\ntext-decoration: none;\ncolor: inherit; \n`;\n\nexport default function SearchCategory(prop) {\n\n    const {categories} = prop;\n\n    return (\n        <StyledSearchBar id=\"searchBar\">\n            {categories.map(function (category, index) {\n                return (\n                    <StyledDiv key={index}>\n                        <StyledA href={`#${category.name}`}>\n                        <h1>{category.name}</h1>\n                    </StyledA>\n                    </StyledDiv>\n                )\n            })}\n        </StyledSearchBar>\n    )\n}","import React from 'react';\nimport styled from \"@emotion/styled\";\n\nconst StyledRecipeDescription = styled.div`\nmargin-left: 10px;\n`;\n\nexport default function RecipeDesc(props) {\n    return (\n        <StyledRecipeDescription>\n            <button>\n                Recipe\n            </button>\n            {props.children}\n        </StyledRecipeDescription>\n    )\n}","import React, {useState} from 'react';\nimport styled from \"@emotion/styled\";\nimport RecipeDesc from \"./recipedescription\";\n\nconst StyledRecipeName = styled.h2`\nmargin-left: 10px;\n`;\n\nexport default function RecipeCard(props) {\n\n    const [showRecipe, setShowRecipe] = useState(false)\n\n    const {recipe} = props\n\n    return (\n        <div onClick={() =>\n            setShowRecipe(!showRecipe)\n        }>\n            <StyledRecipeName>\n                {recipe.name}\n            </StyledRecipeName>\n            {showRecipe && <RecipeDesc>\n                {recipe.description}\n            </RecipeDesc>}\n        </div>\n    )\n}","import React from 'react';\nimport styled from \"@emotion/styled\";\nimport Recipecard from \"./recipecard\";\n\nconst StyledCategory = styled.div`\nbackground-color: ${(props) => props.theme.colors.darkGrey};\nwidth: 100%; \nmargin-top: 10vh;\ncolor: ${(props) => props.theme.colors.primaryWhite};\npadding-bottom: 7px;\n`;\n\nconst StyledCatTitle = styled.h1`\ntext-align: center;\npadding-top: 10px;\n`;\n\nexport default function Category(props) {\n\n    const {recipes, name, id} = props\n\n    return (\n        <StyledCategory id={name}>\n            <StyledCatTitle>\n                {name}\n            </StyledCatTitle>\n            {recipes.map(function (recipe, index) {\n                return (\n                    <Recipecard recipe={recipe} key={index}/>\n                )\n            })}\n        </StyledCategory>\n    )\n}","export default [\n    {\n        name: \"Beef\",\n        id: 1,\n        recipes: [{name: \"Steak\", description: \"A recipe for a juicy, tender, and perfectly cooked steak.\"},\n            {name: \"Ribs\", description: \"Perfectly tender ribs with a marinade of your choice.\"},\n            {name: \"Beef Sandwich\", description: \"A sandwich made out of juicy beef between two layers of soft bread.\"},\n            {name: \"Hamburger\", description: \"A thick, restaurant styled burger with whatever toppings you like.\"}]\n    },\n\n    {\n        name: \"Chicken\",\n        id: 2,\n        recipes: [{name: \"Fried Wings\", description: \"Crunchy on the outside, tender on the inside, the perfect fried chicken!\"},\n            {name: \"Chicken soup\", description: \"A classic recipe for the best chicken soup. Perfect for a cold day.\"},\n            {name: \"Chicken Katsu\", description: \"Crispy chicken breast with a crunchy breadcrumb coating, served over a bowl of rice.\"},\n            {name: \"Buffalo wings\", description: \"Delicious buffalo wings coated with sauce of your choice.\"}]\n    },\n\n    {\n        name: \"Egg\",\n        id: 3,\n        recipes: [{name: \"Hard-boiled egg\", description: \"The easiest recipe for hard-boiled eggs, goes well with about anything!\"},\n            {name: \"Omlette\", description: \"A classic, quick and easy omlette.\"},\n            {name: \"Scrambled egg\", description: \"A quick and easy way to prepare a creamy and delicate meal with eggs.\"},\n            {name: \"Sunny-side-up egg\", description: \"A creamy, soft and delicate, yet very simple way of preparing and egg. \"}]\n    },\n\n    {\n        name: \"Pasta\",\n        id: 4,\n        recipes: [{name: \"Spaghetti Bolognese\", description: \"A hot bowl of spaghetti swimming in a robust bolognese sauce.\"},\n            {name: \"Lasagna\", description: \"Thinly rolled pasta with multiple layers of delicious sauce and cheese.\"},\n            {name: \"Macaroni and cheese\", description: \"Soft macaroni swimming in a pool of hot and melted cheese.\"},\n            {name: \"Tagliatelle\", description: \"Another italian way of making a perfect bowl of pasta.\"}]\n    },\n\n    {\n        name: \"Vegetarian\",\n        id: 5,\n        recipes: [{name: \"Ceasar salad\", description: \"A healthy, yet delicious meal with all your favorite vegetables.\"},\n            {name: \"Roasted carrot and beets\", description: \"A dish including a combination of roasted carrots and beets.\"},\n            {name: \"Vegetable soup\", description: \"A healthy bowl of soup with vegetables of your choice, perfect for a cold winter day.\"},\n            {name: \"Cauliflower & roast potato's\", description: \"A delicious combination of cauliflower and roast potato's.\"}]\n    },\n]\n","const colors = {\n    primaryDark: '#000000',\n    primaryWhite: '#FFFFFF',\n    darkGrey: '#282c34'\n};\n\nexport const theme = {\n   colors\n};","import React from 'react';\nimport styled from \"@emotion/styled\";\nimport './App.css';\nimport Navbar from \"./Components/navbar\";\nimport SearchCategory from \"./Components/searchcategories\";\nimport Category from \"./Components/categories\";\nimport categories from \"./Data/data.js\";\nimport {ThemeProvider} from \"emotion-theming\";\nimport {theme} from \"./theme\";\n\nfunction App() {\n    return (\n        <div>\n            <ThemeProvider theme={theme}>\n            <Navbar/>\n            <SearchCategory categories={categories}/>\n            {categories.map(function (category, index) {\n                return <Category name={category.name} recipes={category.recipes} key={index}/>\n            })}\n            </ThemeProvider>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}